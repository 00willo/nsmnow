#!/bin/bash
#
# Copyright (C) 2008-2009 SecurixLive   <dev@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#
# INCLUDES
#
INC="/etc/nsm/administration.conf"
. $INC

. $NSM_LIB_DIR/lib-console-utils
. $NSM_LIB_DIR/lib-nsm-common-utils
. $NSM_LIB_DIR/lib-nsm-sensor-utils

#
# USAGE
#
print_usage()
{
	echo 
	echo "The NSMnow Adminstriation scripts are designed to easily configure and manage"
	echo "your NSM installation. Bugs, comments and flames can be directed to the"
	echo "SXL team at dev@securixlive.com"
	echo
	echo "The NSMnow Administration scripts come with ABSOLUTELY NO WARRANTY."
	echo 
	echo "Usage: $0 [options]"
	echo
	echo "Options:"
	echo "    -d         Use dialog mode"
	echo "    -y         Force yes"
	echo "    -V         Show version information"
	echo "    -?         Show usage information"
	echo 
	echo "Long Options: "
	echo "    --sensor-name=<name>             Define specific sensor <name> to process"
	echo "    --only-barnyard2                 Only process barnyard2"
	echo "    --only-sancp                     Only process sancp"
	echo "    --only-snort-alert               Only process snort alert"
	echo "    --only-snort-logging             Only process snort logging"
	echo "    --only-pcap-agent                Only process pcap_agent"
	echo "    --only-sancp-agent               Only process sancp_agent"
	echo "    --only-snort-agent               Only process snort_agent"
	echo "    --skip-barnyard2                 Skip processing of barnyard2"
	echo "    --skip-sancp                     Skip processing of sancp"
	echo "    --skip-snort-alert               Skip processing of snort alert"
	echo "    --skip-snort-logging             Skip processing of snort logging"
	echo "    --skip-pcap-agent                Skip processing of pcap_agent"
	echo "    --skip-sancp-agent               Skip processing of sancp_agent"
	echo "    --skip-snort-agent               Skip processing of snort_agent"
	echo
	echo "    --dialog                         Same as -d"
	echo "    --force-yes                      Same as -y"
	echo
	echo "    --version                        Same as -V"
	echo "    --help                           Same as -?"
	echo 
}

# script specific variables
PROMPT_SCRIPT="Stop Sensor"
PROMPT_MODE=cli
FORCE_YES=""

# sensor specific variables
SENSOR_NAME=""
SENSOR_INTERFACE=""
SENSOR_SERVER_HOST=""
SENSOR_SERVER_PORT=""
SENSOR_BY_PORT=""
SENSOR_NET_GROUP=""
SENSOR_VLAN_TAGGING=""
SENSOR_AUTO=""

PROCESS_LOG_DIR="/var/log/nsm"
PROCESS_PID_DIR="/var/run/nsm"

# processing specific variables
SKIP_INVERT=""
SKIP_SANCP=""
SKIP_SNORT_ALERT=""
SKIP_SNORT_LOGGING=""
SKIP_BARNYARD2=""
SKIP_SNORT_AGENT=""
SKIP_SANCP_AGENT=""
SKIP_PCAP_AGENT=""

# extract necessary pre-check arguments from the commandline
while [ "$#" -gt 0 ]
do
	case $1 in
		"-d" | "--dialog")
			PROMPT_MODE=dialog
			;;
		"-y" | "--force-yes")
			FORCE_YES=yes
			;;
		"-?" | "--help")
			SHOW_HELP_ONLY=yes
			;;
		"-V" | "--version")
			SHOW_VERSION_ONLY=yes
			;;
		--sensor-name*)
			SENSOR_NAME="$SENSOR_NAME $(echo $1 | cut -d "=" -f 2)"
			;;
		--only-barnyard2)
			SKIP_INVERT=yes
			SKIP_BARNYARD2=yes
			;;
		--only-sancp)
			SKIP_INVERT=yes
			SKIP_SANCP=yes
			;;
		--only-snort-alert)
			SKIP_INVERT=yes
			SKIP_SNORT_ALERT=yes
			;;
		--only-snort-logging)
			SKIP_INVERT=yes
			SKIP_SNORT_LOGGING=yes
			;;
		--only-pcap-agent)
			SKIP_INVERT=yes
			SKIP_PCAP_AGENT=yes
			;;
		--only-sancp-agent)
			SKIP_INVERT=yes
			SKIP_SANCP_AGENT=yes
			;;
		--only-snort-agent)
			SKIP_INVERT=yes
			SKIP_SNORT_AGENT=yes
			;;
		--skip-barnyard2)
			SKIP_BARNYARD2=yes
			;;
		--skip-sancp)
			SKIP_SANCP=yes
			;;
		--skip-snort-alert)
			SKIP_SNORT_ALERT=yes
			;;
		--skip-snort-logging)
			SKIP_SNORT_LOGGING=yes
			;;
		--skip-pcap-agent)
			SKIP_PCAP_AGENT=yes
			;;
		--skip-sancp-agent)
			SKIP_SANCP_AGENT=yes
			;;
		--skip-snort-agent)
			SKIP_SNORT_AGENT=yes
			;;
		--server*)
			# any server directive is clearly meant for the server
			exit 0
			;;
        *)
			echo_error_msg 0 "OOPS: Unknown option \"${1}\" found!"
			print_usage
			exit 1
            ;;
	esac
	shift
done

# check for help or version requests
if [ -n "$SHOW_HELP_ONLY" ]
then
	print_usage
	exit 0
elif [ -n "$SHOW_VERSION_ONLY" ]
then
	print_version
	exit 0
fi

# ensure we are root user before continuing any further
is_root
if [ "$?" -ne 0 ]
then
	echo_error_msg 0 "OOPS: Must be root to run this script!"
	exit 1;
fi

# sanity check what sensors we are using
if [ -z "$SENSOR_NAME" ]
then
	SENSOR_NAME=$(sensortab_names_get_on_auto "1")
fi
	
# invert skip as appropriate
if [ -n "$SKIP_INVERT" ]
then
	[ -z "$SKIP_PCAP_AGENT" ] && SKIP_PCAP_AGENT=yes || SKIP_PCAP_AGENT=""
	[ -z "$SKIP_SANCP_AGENT" ] && SKIP_SANCP_AGENT=yes || SKIP_SANCP_AGENT=""
	[ -z "$SKIP_SNORT_AGENT" ] && SKIP_SNORT_AGENT=yes || SKIP_SNORT_AGENT=""
	[ -z "$SKIP_SNORT_ALERT" ] && SKIP_SNORT_ALERT=yes || SKIP_SNORT_ALERT=""
	[ -z "$SKIP_SANCP" ] && SKIP_SANCP=yes || SKIP_SANCP=""
	[ -z "$SKIP_BARNYARD2" ] && SKIP_BARNYARD2=yes || SKIP_BARNYARD2=""
	[ -z "$SKIP_SNORT_LOGGING" ] && SKIP_SNORT_LOGGING=yes || SKIP_SNORT_LOGGING=""
fi

#
# STOP
#

for SENSOR in $SENSOR_NAME
do

	echo_msg 0 "Stopping: ${SENSOR}"

	# check for sensor configuration file
	SENSOR_CONF="/etc/nsm/$SENSOR/sensor.conf"
	if [ ! -f "$SENSOR_CONF" ]
	then
		echo_error_msg 1 "sensor does not exist!"
		exit 1
	fi
				
	# stop agents
	[ -z "$SKIP_PCAP_AGENT" ] && process_stop "pcap_agent.tcl" "$PROCESS_PID_DIR/$SENSOR/pcap_agent.pid" "pcap_agent (sguil)"
   	[ -z "$SKIP_SANCP_AGENT" ] && process_stop "sancp_agent.tcl" "$PROCESS_PID_DIR/$SENSOR/sancp_agent.pid" "sancp_agent (sguil)"
	[ -z "$SKIP_SNORT_AGENT" ] && process_stop "snort_agent.tcl" "$PROCESS_PID_DIR/$SENSOR/snort_agent.pid" "snort_agent (sguil)"

	# stop the unified snort
   	[ -z "$SKIP_SNORT_ALERT" ] && process_stop "snort" "$PROCESS_PID_DIR/$SENSOR/snortu.pid" "snort (alert data)"

	# stop barnyard2
	[ -z "$SKIP_BARNYARD2" ] && process_stop "barnyard2" "$PROCESS_PID_DIR/$SENSOR/barnyard2.pid" "barnyard2 (spooler, unified2 format)"

	# stop sancp
	[ -z "$SKIP_SANCP" ] && process_stop "sancp" "$PROCESS_PID_DIR/$SENSOR/sancp.pid" "sancp (session data)"

	# stop the logging snort
	[ -z "$SKIP_SNORT_LOGGING" ] && process_stop "snort" "$PROCESS_PID_DIR/$SENSOR/snortl.pid" "snort (full packet data)"

done

