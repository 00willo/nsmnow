#!/bin/bash
#
# Copyright (C) 2008-2009 SecurixLive   <dev@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#
# INCLUDES
#
INC="/etc/nsm/administration.conf"
. $INC

. $NSM_LIB_DIR/lib-console-utils
. $NSM_LIB_DIR/lib-nsm-common-utils
. $NSM_LIB_DIR/lib-nsm-sensor-utils

#
# USAGE
#
print_usage()
{
	echo 
	echo "The NSMnow Adminstriation scripts are designed to easily configure and manage"
	echo "your NSM installation. Bugs, comments and flames can be directed to the"
	echo "SXL team at dev@securixlive.com"
	echo
	echo "The NSMnow Administration scripts come with ABSOLUTELY NO WARRANTY."
	echo 
	echo "Usage: $0 [options]"
	echo
	echo "Options:"
	echo "    -d         Use dialog mode"
	echo "    -y         Force yes"
	echo "    -V         Show version information"
	echo "    -?         Show usage information"
	echo 
	echo "Long Options: "
	echo "    --sensor-name=<name>             Define name of sensor as <name>"
	echo "    --sensor-interface=<iface>       Define sensing interface as <iface>"
	echo "    --sensor-interface-auto=yes|no   Autoconfigure the sensing interface"
	echo "    --sensor-server-host=<ip>        Define IP of server host"
	echo "    --sensor-server-port=<port>      Define port of server host"
	echo "    --sensor-barnyard2-port=<port>   Define port of server host"
	echo "    --sensor-auto=yes|no             Sensor can be auto assumed"
	echo "    --sensor-net-group               Net group identifier"
	echo "    --sensor-utc=yes|no              Sensor logs in UTC mode"
	echo "    --sensor-vlan-tagging=yes|no     Sensor uses VLAN tagging"
	echo
	echo "    --dialog                         Same as -d"
	echo "    --force-yes                      Same as -y"
	echo
	echo "    --version                        Same as -V"
	echo "    --help                           Same as -?"
	echo 
}

# script specific variables
PROMPT_SCRIPT="Add Sensor"
PROMPT_MODE="cli"
FORCE_YES=""

# sensor specific variables
SENSOR_NAME=""
SENSOR_INTERFACE=""
SENSOR_INTERFACE_AUTO=""
SENSOR_SERVER_HOST=""
SENSOR_SERVER_PORT=""
SENSOR_BARNYARD2_PORT=""
SENSOR_NET_GROUP="Ext_Net"
SENSOR_VLAN_TAGGING=""
SENSOR_AUTO=""
SENSOR_UTC=""

SENSOR_USER="sguil"
SENSOR_GROUP="sguil"
SENSOR_LOG_DIR="/nsm/sensor_data"
SENSOR_CONF_DIR="/etc/nsm"

SNORT_OPTIONS="-m 112"
SANCP_OPTIONS=""
BARNYARD2_OPTIONS=""

# extract necessary pre-check arguments from the commandline
while [ "$#" -gt 0 ]
do
	case $1 in
		"-d" | "--dialog")
			PROMPT_MODE=dialog
			;;
		"-y" | "--force-yes")
			FORCE_YES=yes
			;;
		"-?" | "--help")
			SHOW_HELP_ONLY=yes
			;;
		"-V" | "--version")
			SHOW_VERSION_ONLY=yes
			;;
		--sensor-name*)
			SENSOR_NAME=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-interface*)
			SENSOR_INTERFACE=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-interface-auto*)
			[ "$(echo $1 | cut -d '=' -f 2)" == "yes" ] && SENSOR_INTERFACE_AUTO=Y
			;;
		--sensor-vlan-tagging)
			[ "$(echo $1 | cut -d '=' -f 2)" == "yes" ] && SENSOR_VLAN_TAGGING=Y
			;;
		--sensor-server-host*)
			SENSOR_SERVER_HOST=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-server-port*)
			SENSOR_SERVER_PORT=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-barnyard2-port*)
			SENSOR_BARNYARD2_PORT=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-net-group*)
			SENSOR_NET_GROUP=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-auto*)
			[ "$(echo $1 | cut -d '=' -f 2)" == "yes" ] && SENSOR_AUTO=Y
			;;
		--sensor-utc*)
			[ "$(echo $1 | cut -d '=' -f 2)" == "yes" ] && SENSOR_UTC=Y
			;;
		--server*)
			# any server directive is clearly meant for the server
			exit 0
			;;
        *)
			echo_error_msg 0 "OOPS: Unknown option \"${1}\" found!"
			print_usage
			exit 1
            ;;
	esac
	shift
done

# check for help or version requests
if [ -n "$SHOW_HELP_ONLY" ]
then
	print_usage
	exit 0
elif [ -n "$SHOW_VERSION_ONLY" ]
then
	print_version
	exit 0
fi

# ensure we are root user before continuing any further
is_root
if [ "$?" -ne 0 ]
then
	echo_error_msg 0 "OOPS: Must be root to run this script!"
	exit 1;
fi
	
#
# COLLECT INPUT
#

# collect sensor name
if [ -z "$SENSOR_NAME" ]
then
	prompt_user_input "Sensor Name" "Enter the name of the sensor" "sensor-${RANDOM}"

	[ "$?" -ne 0 ] && exit 1
	SENSOR_NAME=$PROMPT_RET
fi

# check that the sensor does not exist
if [ -d "/etc/nsm/$SENSOR_NAME" -o -d "/nsm/sensor_name/$SENSOR_NAME" ]
then
	echo_error_msg 0 "OOPS: The sensor \"$SENSOR_NAME\" already exists!"
	exit 1
fi

# collect sensor log dir
SENSOR_LOG_DIR="$SENSOR_LOG_DIR/$SENSOR_NAME"

# collect sensor interface
if [ -z "$SENSOR_INTERFACE" ]
then
	prompt_user_input "Sensor Interface" "Enter the interface this sensor will listen on" "eth0"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_INTERFACE=$PROMPT_RET
fi

# collect auto-configure interface requirements
if [ -z "$SENSOR_INTERFACE_AUTO" ]
then
	prompt_user_yesno "Autoconfigure Sensor Interface" "Do you want the defined sensor interface to be autoconfigured by the NSMnow Administration scripts?" "N"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_INTERFACE_AUTO=$PROMPT_RET
fi

# collect server host
if [ -z "$SENSOR_SERVER_HOST" ]
then
	prompt_user_input "Server Host" "Enter the hostname or IP of the server this sensor will connect to" "localhost"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_SERVER_HOST=$PROMPT_RET
fi

# collect server port
if [ -z "$SENSOR_SERVER_PORT" ]
then
	prompt_user_input "Server Port" "Enter the listening port of the server this sensor will connect to" "7736"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_SERVER_PORT=$PROMPT_RET
fi

# collect barnyard2 port
while [ -z "$SENSOR_BARNYARD2_PORT" -o -n "$(sensortab_names_get_on_port $SENSOR_BARNYARD2_PORT)" ]
do
	prompt_user_input "Barynard2 Port" "Enter the local listening port to be used by barnyard2 and the snort_agent. This port must not conflict with other local services, including existing active sensors." "$(sensortab_port_find_available 7700 7735 7735)"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_BARNYARD2_PORT=$PROMPT_RET
done

# collect autostart requirements
if [ -z "$SENSOR_AUTO" ]
then
	prompt_user_yesno "Auto" "Do you want this sensor to be auto assumed with the NSMnow Administration scripts?" "N"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_AUTO=$PROMPT_RET
fi

# collect utc requirements
if [ -z "$SENSOR_UTC" ]
then
	prompt_user_yesno "UTC" "Do you want this sensor to log in UTC mode?" "Y"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_UTC=$PROMPT_RET
fi

# collect vlan requirements
if [ -z "$SENSOR_VLAN_TAGGING" ]
then
	prompt_user_yesno "VLAN Tagging" "Is this sensor monitoring VLAN or encapsulated traffic?" "N"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_VLAN_TAGGING=$PROMPT_RET
fi

# prompt to create the sensor
prompt_user_yesno "Create Sensor" "The following information has been collected:\n\n  name:        $SENSOR_NAME\n  net group:   $SENSOR_NET_GROUP\n  interface:   $SENSOR_INTERFACE\n  auto (if):   $SENSOR_INTERFACE_AUTO\n  server:      $SENSOR_SERVER_HOST:$SENSOR_SERVER_PORT\n  barnyard2:   $SENSOR_BARNYARD2_PORT\n  auto:        $SENSOR_AUTO\n  utc:         $SENSOR_UTC\n  vlan:        $SENSOR_VLAN_TAGGING\n\nDo you want to create?" "Y"
[ "$?" -ne 0 ] && exit 1

[ "$PROMPT_RET" != "Y" -a "$PROMPT_RET" != "y" ] && exit 1

#
# ADD
#

# do the creation
echo_msg 0 "Creating new sensor: $SENSOR_NAME"

# make the directories
for DIR in "/nsm/sensor_data/$SENSOR_NAME/dailylogs" "/nsm/sensor_data/$SENSOR_NAME/portscans" "/nsm/sensor_data/$SENSOR_NAME/sancp" "/etc/nsm/$SENSOR_NAME/rules"
do
	if [ ! -d "$DIR" ]
	then
		mkdir -p "$DIR"
		if [ "$?" -ne 0 ]
		then
			echo_error_msg 1 "unable to create $DIR"
		fi
	fi
done

# satisfy any mandatory access control requirements (eg. Ubuntu => AppArmor)
is_ubuntu "9.04+"
if [ "$?" -eq 0 ]
then
    apparmor_add "/etc/apparmor.d/usr.sbin.tcpdump" "/nsm/sensor_data/${SENSOR_NAME}/dailylogs/**[^/] r"
    if [ "$?" -ne 0 ]
    then
        echo_error_msg 1 "unable to update the apparmor profile for MySQL (see README.apparmor)"
    fi
fi

# copy the templates
cp -a /usr/share/nsmnow/templates/snort/* /etc/nsm/$SENSOR_NAME

# build the configuration files
THE_TIME=$(date)
cat >/etc/nsm/$SENSOR_NAME/sensor.conf << EOF_SENSOR
# sensor.conf: auto-generated by NSMnow Administration on $THE_TIME
SENSOR_NAME="${SENSOR_NAME}"

SENSOR_INTERFACE="${SENSOR_INTERFACE}"
SENSOR_INTERFACE_AUTO="${SENSOR_INTERFACE_AUTO}"
SENSOR_NET_GROUP="${SENSOR_NET_GROUP}"

SENSOR_SERVER_HOST="${SENSOR_SERVER_HOST}"
SENSOR_SERVER_PORT="${SENSOR_SERVER_PORT}"
SENSOR_BARNYARD2_PORT="${SENSOR_BARNYARD2_PORT}"

SENSOR_USER="${SENSOR_USER}"
SENSOR_GROUP="${SENSOR_GROUP}"
SENSOR_LOG_DIR="${SENSOR_LOG_DIR}"
SENSOR_VLAN_TAGGING="${SENSOR_VLAN_TAGGING}"
SENSOR_AUTO="${SENSOR_AUTO}"
SENSOR_UTC="${SENSOR_UTC}"

PCAP_AGENT_CONFIG="${SENSOR_CONF_DIR}/${SENSOR_NAME}/pcap_agent.conf"
SANCP_AGENT_CONFIG="${SENSOR_CONF_DIR}/${SENSOR_NAME}/sancp_agent.conf"
SNORT_AGENT_CONFIG="${SENSOR_CONF_DIR}/${SENSOR_NAME}/snort_agent.conf"
SNORT_CONFIG="${SENSOR_CONF_DIR}/${SENSOR_NAME}/snort.conf"
SNORT_OPTIONS="${SNORT_OPTIONS}"
BARNYARD2_CONFIG="${SENSOR_CONF_DIR}/${SENSOR_NAME}/barnyard2.conf"
BARNYARD2_WALDO="${SENSOR_CONF_DIR}/${SENSOR_NAME}/barnyard2.waldo"
BARNYARD2_OPTIONS="${BARNYARD2_OPTIONS}"
SANCP_CONFIG="${SENSOR_CONF_DIR}/${SENSOR_NAME}/sancp.conf"
SANCP_OPTIONS="${SANCP_OPTIONS}"
EOF_SENSOR

THE_TIME=$(date)
[ "${SENSOR_VLAN_TAGGING}" == "Y" ] && SENSOR_VLAN_TAGGING=1 || SENSOR_VLAN_TAGGING=0
cat >/etc/nsm/$SENSOR_NAME/pcap_agent.conf << EOF_PCAP_AGENT
# pcap_agent.conf: auto-generated by NSMnow Administration on $THE_TIME
# DEBUG is VERY chatty. Use it only when needed (1=on, 0=off)
set DEBUG 1
# Run in background (1=yes, 0=no)
set DAEMON 0
# Name of sguild server
set SERVER_HOST $SENSOR_SERVER_HOST
# Port sguild listens on for sensor connects
set SERVER_PORT $SENSOR_SERVER_PORT
# Local hostname (sensors monitoring multiple interfaces need to use a unique 'hostname' for each interface)
set HOSTNAME $SENSOR_NAME
# The net id is used to correlate data from different agents.
set NET_GROUP $SENSOR_NET_GROUP
# The root of your log dir for data like pcap, portscans, sessions, etc
set LOG_DIR /nsm/sensor_data
# Where raw/pcap files are being logged to and will be read from.
set RAW_LOG_DIR \${LOG_DIR}/\${HOSTNAME}/dailylogs
# Path to tcpdump. Used for parsing pcap files.
set TCPDUMP "/usr/sbin/tcpdump"
# If you do VLAN tagging then set this to 1 so the right filter is passed to tcpdump.
set VLAN $SENSOR_VLAN_TAGGING
# Directory to store the temp pcap files
set TMP_DIR "/tmp"
# sensor agent reports current disk use up to sguild
set WATCH_DIR \${LOG_DIR}/\${HOSTNAME}
# Delay in milliseconds for doing different functions.
set FILE_CHECK_IN_MSECS 300000
# Disk space
set DISK_CHECK_DELAY_IN_MSECS 1800000
# Keep a heartbeat going w/PING PONG in milliseconds. (0 to disable)
set PING_DELAY 300000
EOF_PCAP_AGENT
		
THE_TIME=$(date)
cat >/etc/nsm/$SENSOR_NAME/sancp_agent.conf << EOF_SANCP_AGENT
# sancp_agent.conf: auto-generated by NSMnow Administration on $THE_TIME
# DEBUG is VERY chatty. Use it only when needed (1=on, 0=off)
set DEBUG 1
# Run in background (1=yes, 0=no)
set DAEMON 0
# Name of sguild server
set SERVER_HOST $SENSOR_SERVER_HOST 
# Port sguild listens on for sensor connects
set SERVER_PORT $SENSOR_SERVER_PORT
# Local hostname (sensors monitoring multiple interfaces need to use a unique 'hostname' for each interface)
set HOSTNAME $SENSOR_NAME
# The net id is used to correlate data from different agents. 
set NET_GROUP $SENSOR_NET_GROUP 
# The root of your log dir for data like pcap, portscans, sessions, etc
set LOG_DIR /nsm/sensor_data 
# Enable sancp stats (1=enable 0=disable)
set SANCP 1
# Where stats from sancp are kept
set SANCP_DIR \${LOG_DIR}/\${HOSTNAME}/sancp
# Keep a heartbeat going w/PING PONG in milliseconds. (0 to disable)
set PING_DELAY 300000 
# SANCP files
set SANCP_CHECK_DELAY_IN_MSECS 10000
EOF_SANCP_AGENT

THE_TIME=$(date)
cat >/etc/nsm/$SENSOR_NAME/snort_agent.conf << EOF_SNORT_AGENT
# snort_agent.conf: auto-generated by NSMnow Administration on $THE_TIME
# DEBUG is VERY chatty. Use it only when needed (1=on, 0=off)
set DEBUG 1
# Run in background (1=yes, 0=no)
set DAEMON 0
# Name of sguild server
set SERVER_HOST $SENSOR_SERVER_HOST
# Port sguild listens on for sensor connects
set SERVER_PORT $SENSOR_SERVER_PORT
# Port snort_agent listens on for barnyard2 connects
set BY_PORT $SENSOR_BARNYARD2_PORT
# Local hostname (sensors monitoring multiple interfaces need to use a unique 'hostname' for each interface)
set HOSTNAME $SENSOR_NAME
# The net id is used to correlate data from different agents.
set NET_GROUP $SENSOR_NET_GROUP
# The root of your log dir for data like pcap, portscans, sessions, etc
set LOG_DIR /nsm/sensor_data
# Check for Portscan (spp_portscan) data files (0=off, 1=on)
set PORTSCAN 0
# Where to look for files created by modded spp_portscan
set PORTSCAN_DIR \${LOG_DIR}/\${HOSTNAME}/portscans
# Snort Perfmonitor Stats (1=enable, 0=disable)
set SNORT_PERF_STATS 1
# File being logged to:
set SNORT_PERF_FILE "\${LOG_DIR}/\${HOSTNAME}/snort.stats"
# sensor agent reports current disk use up to sguild
set WATCH_DIR \${LOG_DIR}/\${HOSTNAME}
# Portscan files
set PS_CHECK_DELAY_IN_MSECS 10000 
# Disk space
set DISK_CHECK_DELAY_IN_MSECS 1800000 
# Keep a heartbeat going w/PING PONG in milliseconds. (0 to disable)
set PING_DELAY 300000 
EOF_SNORT_AGENT


THE_TIME=$(date)
cat >/etc/nsm/$SENSOR_NAME/barnyard2.conf << EOF_BARNYARD2
# barnyard2.conf: auto-generated by NSMnow Administration on $THE_TIME
config logdir: $SENSOR_LOG_DIR
config classification_file: /etc/nsm/$SENSOR_NAME/classification.config
config reference_file:      /etc/nsm/$SENSOR_NAME/reference.config
config sid_file:            /etc/nsm/$SENSOR_NAME/sid-msg.map
config gen_file:            /etc/nsm/$SENSOR_NAME/gen-msg.map
config hostname: $SENSOR_NAME
config interface: $SENSOR_INTERFACE
input unified2
output sguil: sensor_name=$SENSOR_NAME agent_port=$SENSOR_BARNYARD2_PORT
EOF_BARNYARD2

THE_TIME=$(date)
cat >/etc/nsm/$SENSOR_NAME/snort.conf << EOF_SNORT
# snort.conf: auto-generated by NSMnow Administration on $THE_TIME
var HOME_NET any
var EXTERNAL_NET any
var DNS_SERVERS \$HOME_NET
var SMTP_SERVERS \$HOME_NET
var HTTP_SERVERS \$HOME_NET
var SQL_SERVERS \$HOME_NET
var TELNET_SERVERS \$HOME_NET
var SNMP_SERVERS \$HOME_NET
portvar HTTP_PORTS 80
portvar SHELLCODE_PORTS !80
portvar ORACLE_PORTS 1521
var AIM_SERVERS [64.12.24.0/23,64.12.28.0/23,64.12.161.0/24,64.12.163.0/24,64.12.200.0/24,205.188.3.0/24,205.188.5.0/24,205.188.7.0/24,205.188.9.0/24,205.188.153.0/24,205.188.179.0/24,205.188.248.0/24]
var RULE_PATH ./rules
var PREPROC_PATH ./preproc_rules
config logdir: /nsm/sensor_data/$SENSOR_NAME
dynamicpreprocessor directory $SNORT_LIB_DIR/snort_dynamicpreprocessor/
dynamicengine $SNORT_LIB_DIR/snort_dynamicengine/libsf_engine.so
preprocessor frag3_global: max_frags 65536
preprocessor frag3_engine: policy first detect_anomalies
preprocessor stream5_global: max_tcp 8192, track_tcp yes, track_udp no
preprocessor stream5_tcp: policy first, use_static_footprint_sizes
preprocessor perfmonitor: time 300 file /nsm/sensor_data/$SENSOR_NAME/snort.stats pktcnt 10000
preprocessor http_inspect: global \\
   iis_unicode_map unicode.map 1252
preprocessor http_inspect_server: server default \\
   profile all ports { 80 8080 8180 } oversize_dir_length 500
preprocessor rpc_decode: 111 32771
preprocessor bo
preprocessor ftp_telnet: global \\
   encrypted_traffic yes \\
   inspection_type stateful
preprocessor ftp_telnet_protocol: telnet \\
   normalize \\
   ayt_attack_thresh 200
preprocessor ftp_telnet_protocol: ftp server default \\
   def_max_param_len 100 \\
   alt_max_param_len 200 { CWD } \\
   cmd_validity MODE < char ASBCZ > \\
   cmd_validity MDTM < [ date nnnnnnnnnnnnnn[.n[n[n]]] ] string > \\
   chk_str_fmt { USER PASS RNFR RNTO SITE MKD } \\
   telnet_cmds yes \\
   data_chan
preprocessor ftp_telnet_protocol: ftp client default \\
   max_resp_len 256 \\
   bounce yes \\
   telnet_cmds yes
preprocessor smtp: \\
  ports { 25 587 691 } \\
  inspection_type stateful \\
  normalize cmds \\
  normalize_cmds { EXPN VRFY RCPT } \\
  alt_max_command_line_len 260 { MAIL } \\
  alt_max_command_line_len 300 { RCPT } \\
  alt_max_command_line_len 500 { HELP HELO ETRN } \\
  alt_max_command_line_len 255 { EXPN VRFY }
preprocessor sfportscan: proto  { all } \\
                         memcap { 10000000 } \\
                         sense_level { low }
preprocessor dcerpc: \\
    autodetect \\
    max_frag_size 3000 \\
    memcap 100000
preprocessor dns: \\
    ports { 53 } \\
    enable_rdata_overflow
preprocessor ssl: noinspect_encrypted
output unified2: filename snort.unified2, limit 128
include classification.config
include reference.config
include \$RULE_PATH/local.rules
include \$RULE_PATH/bad-traffic.rules
include \$RULE_PATH/exploit.rules
include \$RULE_PATH/scan.rules
include \$RULE_PATH/finger.rules
include \$RULE_PATH/ftp.rules
include \$RULE_PATH/telnet.rules
include \$RULE_PATH/rpc.rules
include \$RULE_PATH/rservices.rules
include \$RULE_PATH/dos.rules
include \$RULE_PATH/ddos.rules
include \$RULE_PATH/dns.rules
include \$RULE_PATH/tftp.rules
include \$RULE_PATH/web-cgi.rules
include \$RULE_PATH/web-coldfusion.rules
include \$RULE_PATH/web-iis.rules
include \$RULE_PATH/web-frontpage.rules
include \$RULE_PATH/web-client.rules
include \$RULE_PATH/web-php.rules
include \$RULE_PATH/sql.rules
include \$RULE_PATH/x11.rules
include \$RULE_PATH/icmp.rules
include \$RULE_PATH/netbios.rules
include \$RULE_PATH/misc.rules
include \$RULE_PATH/attack-responses.rules
include \$RULE_PATH/oracle.rules
include \$RULE_PATH/mysql.rules
include \$RULE_PATH/snmp.rules
include \$RULE_PATH/smtp.rules
include \$RULE_PATH/imap.rules
include \$RULE_PATH/pop2.rules
include \$RULE_PATH/pop3.rules
include \$RULE_PATH/nntp.rules
include \$RULE_PATH/other-ids.rules
include \$RULE_PATH/icmp-info.rules
include \$RULE_PATH/experimental.rules
EOF_SNORT

THE_TIME=$(date)
cat >/etc/nsm/$SENSOR_NAME/sancp.conf << EOF_SANCP
# sancp.conf: auto-generated by NSMnow Administration on $THE_TIME 
# Currently, sguil only supports the 'stats' output and we want it in timestamped fields
default stats tsfilename stats
# Time in seconds we write a new file if expired cnxs are available
default flush_interval=30
# This tells sancp to open new file handle, write, and close in one step
default burst_mode=enable
# Default timeout: how many secs to wait after the last packet till we consider the cnx closed
default timeout=120
# Conforms with out sguil sancp table schema
format stats sancp_id,start_time_gmt,stop_time_gmt,duration,ip_proto,src_ip_decimal,src_port,dst_ip_decimal,dst_port,src_pkts,src_bytes,dst_pkts,dst_bytes,sflags,dflags
# From here on you define what stats/cnxs/sessions/flows (whatever you want to call it) get logged.
# Please read the sancp documention for more information.
# Most of the below are examples of setting variables for complex rules
var ip 8                # ether proto 0x0800  # ip traffic
# define some ip protocols
var icmp 1
var tcp 6
var udp 17
# define some tcp protocols
var http 80
var https 443
var smtp 25
var dns 53
var HOME_NET 67.11.255.148
#var WWW_NET 192.168.1.0/24
#var MAIL_SERVER 192.168.1.2
#var MAIL_SERVER2 192.168.1.3
# Default output logging for each connection
# We don't use realtime or pcap logging at this point so we pass them
default realtime=pass
default pcap=pass
# Here is where our rules start. We log all stats by default so this is defining exceptions.
# first six fields are required before rule options can be used
#     eth_proto src_ip dst_ip ip_proto src_port dst_port
# Here is an example if ignoring outbound HTTP stats
#ip HOME_NET any tcp any http, stats pass
#ip HOME_NET any tcp any https, stats pass
EOF_SANCP

# with all files created, enforce certain permissions
chown -R $SENSOR_USER:$SENSOR_GROUP "/nsm/sensor_data/$SENSOR_NAME" "/etc/nsm/$SENSOR_NAME"

chmod 775 "/nsm/sensor_data/$SENSOR_NAME" "/nsm/sensor_data/$SENSOR_NAME/dailylogs" "/nsm/sensor_data/$SENSOR_NAME/portscans" "/nsm/sensor_data/$SENSOR_NAME/sancp" "/etc/nsm/$SENSOR_NAME" "/etc/nsm/$SENSOR_NAME/rules"

# udpate sensortab
sensortab_entry_add $SENSOR_NAME $SENSOR_AUTO $SENSOR_BARNYARD2_PORT $SENSOR_INTERFACE
if [ "$?" -ne 0 ]
then
	echo_error_msg 1 "OOPS: The sensor table could not be updated!"
	rm -rf /etc/nsm/$SENSOR_NAME
	rm -rf /nsm/sensor_data/$SENSOR_NAME
	exit 1
fi

# add all files into tracking cache
find /etc/nsm/$SENSOR_NAME /nsm/sensor_data/$SENSOR_NAME -type f | while read FILE
do
	cache_file_add $FILE "sensor:$SENSOR_NAME"
done

exit 0
